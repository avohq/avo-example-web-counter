// Generated by AvoCode VERSION 0.0.1, PLEASE EDIT WITH CARE
/* eslint-disable */


var amplitude = require("avo-amplitude-js");

var amplitudeDevApiKey = "26aeb7d9e9737f62d9bc9d10f7efdc9a";
var amplitudeProdApiKey = "26aeb7d9e9737f62d9bc9d10f7efdc9a";

if (process.env.NODE_ENV !== "production") {
  amplitude.init(amplitudeDevApiKey);
} else {
  amplitude.init(amplitudeProdApiKey);
}

var segment = require("avo-segment-js");

var segmentDevApiKey = "QHjQR9BpTQ6gsiM0TftH0fVs5G172x3Z";
var segmentProdApiKey = "QHjQR9BpTQ6gsiM0TftH0fVs5G172x3Z";

if (process.env.NODE_ENV !== "production") {
  segment.init(segmentDevApiKey);
} else {
  segment.init(segmentProdApiKey);
}

var mixpanel = require("avo-mixpanel-browser");

var mixpanelDevApiKey = "ca8d0b70d7307092d25b791cd6b3b8e6";
var mixpanelProdApiKey = "ca8d0b70d7307092d25b791cd6b3b8e6";

if (process.env.NODE_ENV !== "production") {
  mixpanel.init(mixpanelDevApiKey);
} else {
  mixpanel.init(mixpanelProdApiKey);
}

var asserts;

if (process.env.NODE_ENV !== "production") {
  asserts = require("avo-assert-js");
}

var counterIncrement = function(oldValue, newValue) {
  if (process.env.NODE_ENV === "development") {
    assertOldValue(oldValue);
    assertNewValue(newValue);
  }
  
  if (process.env.NODE_ENV === "development") {
    console.log("[avo] Event sent:", "Counter Increment", {
      "Old Value": oldValue, "New Value": newValue});
  }
  
  amplitude.logEvent("Counter Increment", {"Old Value": oldValue, 
    "New Value": newValue});
  segment.logEvent("Counter Increment", {"Old Value": oldValue, 
    "New Value": newValue});
  mixpanel.logEvent("Counter Increment", {"Old Value": oldValue, 
    "New Value": newValue});
};

var counterDecrement = function(oldValue, newValue) {
  if (process.env.NODE_ENV === "development") {
    assertOldValue(oldValue);
    assertNewValue(newValue);
  }
  
  if (process.env.NODE_ENV === "development") {
    console.log("[avo] Event sent:", "Counter Decrement", {
      "Old Value": oldValue, "New Value": newValue});
  }
  
  amplitude.logEvent("Counter Decrement", {"Old Value": oldValue, 
    "New Value": newValue});
  segment.logEvent("Counter Decrement", {"Old Value": oldValue, 
    "New Value": newValue});
  mixpanel.logEvent("Counter Decrement", {"Old Value": oldValue, 
    "New Value": newValue});
};

var logRevenue = function(productId_, quantity_, price_, revenueType_) {
  if (process.env.NODE_ENV === "development") {
    console.log("[avo] Event sent:", "Log Revenue", {});
  }
  
  amplitude.logRevenue(productId_, quantity_, price_, revenueType_, {});
  segment.logRevenue(productId_, quantity_, price_, revenueType_, {});
  mixpanel.logRevenue(productId_, quantity_, price_, revenueType_, {});
};

if (process.env.NODE_ENV === "development") {
  var assertOldValue = function(oldValue) {
    asserts.assertInt("Old Value", oldValue);
  };
  
  var assertNewValue = function(newValue) {
    asserts.assertInt("New Value", newValue);
  };
}

exports.counterIncrement = counterIncrement;
exports.counterDecrement = counterDecrement;
exports.logRevenue = logRevenue;

